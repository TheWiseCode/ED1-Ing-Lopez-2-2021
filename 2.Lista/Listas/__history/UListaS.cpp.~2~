// ---------------------------------------------------------------------------

#pragma hdrstop

#include "UListaS.h"
// ---------------------------------------------------------------------------
#pragma package(smart_init)

ListaS::ListaS(){
    m = new CSMemoria();
    longit = 0;
	ptrElementos = NULO;   
}

int ListaS::fin(){
if (vacia()) {
		cout << "Lista vacia\n";
	}
	else {
		NodoL* x = ptrElementos;
		NodoL* ptrFin = NULL;
		while (x != NULL) {
			ptrFin = x;
			x = x->sig;
		}
		return ptrFin;
	}
}

int ListaS::primero(){
    if (!vacia()) {
		return ptrElementos;
	}
	else {
		cout << "Lista vacia\n";
	}
}

int ListaS::siguiente(int dir){
	if (vacia()) {
		cout << "Lista vacia\n";
	}
	else {
		if (dir == fin())
			cout << "Direccion erronea\n";
		else
			return dir->sig;
	}
}

int ListaS::anterior(int dir){
	if (vacia()) {
		cout << "Lista vacia\n";
	}
	else {
		if (dir == primero()) {
			cout << "Direccion erronea\n";
		}
		else {
			NodoL* x = ptrElementos;
			NodoL* ant = NULL;
			while (x != NULL) {
				if (x == dir)
					return ant;
				ant = x;
				x = x->sig;
			}
			return NULL;
		}
	}
}

bool ListaS::vacia(){
    return longit == 0;
}

int ListaS::recupera(int dir){
	if (vacia()) {
		cout << "Lista vacia\n";
	}
	else {
		return dir->elemento;
	}
}

int ListaS::longitud(){
	return longit;
}

void ListaS::inserta(int dir, int e){
	NodoL* x = new NodoL();
	if (x != NULL) {
		x->elemento = e;
		x->sig = NULL;
		if (vacia()) {
			ptrElementos = x;
			longit = 1;
		}
		else {
			if (dir == primero()) {
				x->sig = dir;
				ptrElementos = dir;
			}
			else {
				NodoL* ant = anterior(dir);
				ant->sig = x;
				x->sig = dir;
			}
		}
	}
}

void ListaS::inserta_primero(int e){
	NodoL* x = new NodoL();
	if (x != NULL) {
		x->elemento = e;
		x->sig = ptrElementos;
		longit++;
		ptrElementos = x;
	}
}

void ListaS::inserta_ultimo(int e){
	NodoL* x = new NodoL();
	if (x != NULL) {
		x->elemento = e;
		x->sig = NULL;
		if (longit != 0)
			fin()->sig = x;
		else
			ptrElementos = x;
		longit++;
	}
}

void ListaS::suprime(int dir){
	if (longit == 0) {
		cout << "Lista vacia\n";
		return;
	}
	if (dir == ptrElementos) {
		NodoL* x = ptrElementos;
		ptrElementos = ptrElementos->sig;
		delete x;
	}
	else {
		NodoL* ant = anterior(dir);
		ant->sig = dir->sig;
		delete dir;
	}
	longit--;
}

void ListaS::modifica(int dir, int e){
	if (vacia()) {
		cout << "Lista vacia\n";
	}
	else {
		dir->elemento = e;
	}
}

string ListaS::to_str(){
	string s = "[";
	NodoL* aux = ptrElementos;
	while (aux != NULL) {
		int el = aux->elemento;
		s += to_string(el);
		aux = aux->sig;
		if (aux != NULL)
			s += ",";
	}
	return s + "]";
}